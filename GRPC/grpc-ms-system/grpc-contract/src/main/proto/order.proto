syntax = "proto3";

option java_package = "com.partenairedecode.grpc.order";
option java_multiple_files = true;

package order;

// Importons le message du service Product pour l'utiliser dans la liste des articles de la commande.
import "product.proto";
import "google/protobuf/timestamp.proto"; // Pour la date de création

// 1. MESSAGES
message OrderItem {
  string productId = 1;
  int32 quantity = 2;
  double unitPrice = 3; // Prix au moment de la commande
}

message Order {
  string orderId = 1;
  string customerId = 2;
  repeated OrderItem items = 3; // Liste d'articles dans la commande
  double totalAmount = 4;
  string status = 5; // EX: PENDING, SHIPPED, PAID
  google.protobuf.Timestamp createdAt = 6;
}

message OrderIdRequest {
  string orderId = 1;
}

message Empty{}

// 2. SERVICE
service OrderService {
  // Créer une commande (doit vérifier les produits via gRPC)
  rpc createOrder (Order) returns (Order);

  // Lire une commande par son ID
  rpc getOrderById (OrderIdRequest) returns (Order);

  // Mettre à jour le statut (utilisé par Payment Service)
  rpc updateOrderStatus (Order) returns (product.OperationStatus);

  // Nouvelle méthode : Utilise 'stream Order' pour envoyer plusieurs réponses
  rpc getAllOrders (Empty) returns (stream Order);
}